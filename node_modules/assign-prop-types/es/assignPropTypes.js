'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = assignPropTypes;

var _isAssigner = require('./isAssigner');

var _isAssigner2 = _interopRequireDefault(_isAssigner);

var _isFalsy = require('./isFalsy');

var _isFalsy2 = _interopRequireDefault(_isFalsy);

var _isNativeObject = require('./isNativeObject');

var _isNativeObject2 = _interopRequireDefault(_isNativeObject);

var _isNotProduction = require('./isNotProduction');

var _isNotProduction2 = _interopRequireDefault(_isNotProduction);

var _isComponentLike = require('./isComponentLike');

var _isComponentLike2 = _interopRequireDefault(_isComponentLike);

var _markAssigner = require('./markAssigner');

var _markAssigner2 = _interopRequireDefault(_markAssigner);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function assignPropTypes() {
  var advanceAssigners = [];
  var pdc = [];
  var length = arguments.length;
  var expectedType = 0;
  for (var i = 0; i < length; i++) {
    if (expectedType === 0) {
      if ((0, _isAssigner2.default)(arguments[i])) {
        advanceAssigners.push(arguments[i]);
        continue;
      } else {
        expectedType = 1;
      }
    }
    // Check for expected type
    if (expectedType >= _constants.expectedTypes.length) {
      throw new TypeError('Superfluous argument');
    }
    if (!(0, _isFalsy2.default)(arguments[i])) {
      // Type restriction
      if (!(0, _isNativeObject2.default)(arguments[i])) {
        throw new TypeError('Expects ' + _constants.expectedTypes[expectedType] + ' of type object, ' + _typeof(arguments[i]) + ' passed');
      }
      // Check for non-empty object
      if (_isNotProduction2.default && Object.keys(arguments[i]).length === 0) {
        throw new TypeError('Useless empty ' + _constants.expectedTypes[expectedType]);
      }
    }
    pdc.push(arguments[i]);
    expectedType++;
  }
  var originalAssigner = function originalAssigner(component) {
    if (!(0, _isComponentLike2.default)(component)) {
      throw new TypeError('Assigner called on non-component');
    }
    if (advanceAssigners.length > 0) {
      var _length = advanceAssigners.length;
      for (var _i = 0; _i < _length; _i++) {
        component = advanceAssigners[_i](component);
      }
    }
    if (pdc[0]) {
      // propTypes
      component.propTypes = Object.assign({}, component.propTypes || {}, pdc[0]);
    }
    if (pdc[1]) {
      // defaultProps
      component.defaultProps = Object.assign({}, component.defaultProps || {}, pdc[1]);
    }
    if (pdc[2]) {
      // contextTypes
      component.contextTypes = Object.assign({}, component.contextTypes || {}, pdc[2]);
    }
    return component;
  };

  (0, _markAssigner2.default)(originalAssigner);

  var propTypesAssigner = function propTypesAssigner(component) {
    if ((0, _isNativeObject2.default)(component)) {
      // Extending
      var reassigner = assignPropTypes.apply(null, arguments);
      return assignPropTypes(originalAssigner, reassigner);
    } else {
      return originalAssigner(component);
    }
  };
  (0, _markAssigner2.default)(propTypesAssigner);
  return propTypesAssigner;
}